{"version":3,"file":"database.js","sourceRoot":"","sources":["../../src/database/database.ts"],"names":[],"mappings":"OACO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe;OAC3C,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,WAAW;OAEhD,EAAE,mBAAmB,EAAE,MAAM,SAAS;OAEtC,KAAK,KAAK,MAAM,UAAU;OAC1B,EAGL,qBAAqB,EACtB,MAAM,SAAS;AAGhB;IACE,6BAAqB,QAA0B,EACpC,KAAS;QADC,aAAQ,GAAR,QAAQ,CAAkB;QACpC,UAAK,GAAL,KAAK,CAAI;IAAG,CAAC;IACxB,kCAAI,GAAJ,UAAM,QAA6C,EAAE,IAA6B;QAAlF,iBAKC;QAJC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,QAAQ,EAAE;YAC9C,KAAK,EAAE,cAAM,OAAA,mBAAmB,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,KAAI,CAAC,QAAQ,EAAU,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,EAAvG,CAAuG;YACpH,KAAK,EAAE,cAAM,OAAA,mBAAmB,CAA8B,QAAQ,EAAE,IAAI,CAAC,EAAhE,CAAgE;SAC9E,CAAC,CAAC;IACL,CAAC;IACD,oCAAM,GAAN,UAAO,QAA8C,EAAE,IAA+B;QAAtF,iBAKC;QAJC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,QAAQ,EAAE;YAC9C,KAAK,EAAE,cAAM,OAAA,qBAAqB,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,KAAI,CAAC,QAAQ,EAAU,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,EAAzG,CAAyG;YACtH,KAAK,EAAE,cAAM,OAAA,qBAAqB,CAAC,QAAQ,EAAE,IAAI,CAAC,EAArC,CAAqC;SACnD,CAAC,CAAC;IACL,CAAC;IACI,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,kCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAG,EAAC;QAC7E,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;KACzE,CAAC;IACF,0BAAC;AAAD,CAAC,AAvBD,IAuBC;AAED,mBAAoB,IAAsB,EAAE,GAAU;IACpD,EAAE,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAGlC,GAAG,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAC9D,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACb,CAAC","sourcesContent":["import * as firebase from 'firebase';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { FirebaseApp, FirebaseConfig } from '../tokens';\r\nimport { FirebaseAppConfig } from '../angularfire2';\r\nimport { FirebaseListFactory } from './index';\r\nimport { FirebaseListFactoryOpts, FirebaseObjectFactoryOpts } from '../interfaces';\r\nimport * as utils from '../utils';\r\nimport {\r\n  FirebaseListObservable,\r\n  FirebaseObjectObservable,\r\n  FirebaseObjectFactory\r\n} from './index';\r\n\r\n\r\nexport class AngularFireDatabase {\r\n  constructor( private fbConfig:FirebaseAppConfig,\r\n     private fbApp:any) {}\r\n  list (urlOrRef:string | firebase.database.Reference, opts?:FirebaseListFactoryOpts):FirebaseListObservable<any[]> {\r\n    return utils.checkForUrlOrFirebaseRef(urlOrRef, {\r\n      isUrl: () => FirebaseListFactory(this.fbApp.database().refFromURL(getAbsUrl(this.fbConfig, <string>urlOrRef)), opts),\r\n      isRef: () => FirebaseListFactory(<firebase.database.Reference>urlOrRef, opts)\r\n    });\r\n  }\r\n  object(urlOrRef: string | firebase.database.Reference, opts?:FirebaseObjectFactoryOpts):FirebaseObjectObservable<any> {\r\n    return utils.checkForUrlOrFirebaseRef(urlOrRef, {\r\n      isUrl: () => FirebaseObjectFactory(this.fbApp.database().refFromURL(getAbsUrl(this.fbConfig, <string>urlOrRef)), opts),\r\n      isRef: () => FirebaseObjectFactory(urlOrRef, opts)\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: undefined, decorators: [{ type: Inject, args: [FirebaseConfig, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [FirebaseApp, ] }, ]},\n];\n}\r\n\r\nfunction getAbsUrl (root:FirebaseAppConfig, url:string) {\r\n  if (!(/^[a-z]+:\\/\\/.*/.test(url))) {\r\n    // Provided url is relative.\r\n    // Strip any leading slash\r\n    url = root.databaseURL + '/' + utils.stripLeadingSlash(url);\r\n  }\r\n  return url;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}