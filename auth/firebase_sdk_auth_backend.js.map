{"version":3,"file":"firebase_sdk_auth_backend.js","sourceRoot":"","sources":["../../src/auth/firebase_sdk_auth_backend.ts"],"names":[],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { FirebaseApp } from '../tokens';\r\nimport { ZoneScheduler } from '../utils';\r\nimport {\r\n  authDataToAuthState,\r\n  AuthBackend,\r\n  AuthProviders,\r\n  AuthMethods,\r\n  FirebaseAuthState,\r\n  EmailPasswordCredentials\r\n} from './auth_backend';\r\n\r\nconst {\r\n  FacebookAuthProvider,\r\n  GithubAuthProvider,\r\n  GoogleAuthProvider,\r\n  TwitterAuthProvider\r\n} = firebase.auth;\r\n\r\nimport { map } from 'rxjs/operator/map';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { observeOn } from 'rxjs/operator/observeOn';\r\n\r\n\r\nexport class FirebaseSdkAuthBackend extends AuthBackend {\r\n  _fbAuth: firebase.auth.Auth;\r\n  /**\r\n   * TODO(jeffbcross): change _fbApp type back to firebase.app.App\r\n   * An issue with AoT compiler does not allow interface types on\r\n   * constructor parameters, even when used in conjunction with @Inject.\r\n   * https://github.com/angular/angular/issues/12631\r\n   * https://github.com/angular/angularfire2/issues/653\r\n   **/\r\n  constructor( _fbApp: any) {\r\n    super();\r\n    this._fbAuth = _fbApp.auth();\r\n  }\r\n\r\n  createUser(creds: EmailPasswordCredentials): Promise<FirebaseAuthState> {\r\n    return castPromise<firebase.User>(this._fbAuth.createUserWithEmailAndPassword(creds.email, creds.password))\r\n      .then((user: firebase.User) => authDataToAuthState(user));\r\n  }\r\n\r\n  getAuth(): FirebaseAuthState {\r\n    return authDataToAuthState(this._fbAuth.currentUser);\r\n  }\r\n\r\n  onAuth(): Observable<FirebaseAuthState> {\r\n    let stateChange = Observable.create((observer: Observer<FirebaseAuthState>) => {\r\n      return this._fbAuth.onAuthStateChanged(observer);\r\n    });\r\n    let authState = map.call(stateChange, (user: firebase.User) => {\r\n      if (!user) return null;\r\n      return authDataToAuthState(user, user.providerData[0]);\r\n    });\r\n\r\n    /**\r\n     * TODO: since the auth service automatically subscribes to this before\r\n     * any user, it will run in the Angular zone, instead of the subscription\r\n     * zone. The auth service should be refactored to capture the subscription\r\n     * zone and not use a ReplaySubject.\r\n    **/\r\n    return observeOn.call(authState, new ZoneScheduler(Zone.current));\r\n  }\r\n\r\n  unauth(): Promise<void> {\r\n    return <Promise<void>>this._fbAuth.signOut();\r\n  }\r\n\r\n  authWithCustomToken(token: string): Promise<FirebaseAuthState> {\r\n    return castPromise<firebase.User>((this._fbAuth.signInWithCustomToken(token)))\r\n      .then((user: firebase.User) => authDataToAuthState(user));\r\n  }\r\n\r\n  authAnonymously(): Promise<FirebaseAuthState> {\r\n    return castPromise<firebase.User>(this._fbAuth.signInAnonymously())\r\n      .then((user: firebase.User) => authDataToAuthState(user));\r\n  }\r\n\r\n  authWithPassword(creds: EmailPasswordCredentials): Promise<FirebaseAuthState> {\r\n    return castPromise<firebase.User>(this._fbAuth.signInWithEmailAndPassword(creds.email, creds.password))\r\n      .then((user: firebase.User) => authDataToAuthState(user));\r\n  }\r\n\r\n  authWithOAuthPopup(provider: AuthProviders, options?: any): Promise<firebase.auth.UserCredential> {\r\n    var providerFromFirebase:any = this._enumToAuthProvider(provider);\r\n    if (options.scope) {\r\n      options.scope.forEach(scope => providerFromFirebase.addScope(scope));\r\n    }\r\n    return castPromise<firebase.auth.UserCredential>(this._fbAuth.signInWithPopup(providerFromFirebase));\r\n  }\r\n\r\n  /**\r\n   * Authenticates a Firebase client using a redirect-based OAuth flow\r\n   * NOTE: This promise will not be resolved if authentication is successful since the browser redirected.\r\n   * You should subscribe to the FirebaseAuth object to listen succesful login\r\n   */\r\n  authWithOAuthRedirect(provider: AuthProviders, options?: any): Promise<void> {\r\n    return castPromise<void>(this._fbAuth.signInWithRedirect(this._enumToAuthProvider(provider)));\r\n  }\r\n\r\n  authWithOAuthToken(credential: firebase.auth.AuthCredential): Promise<FirebaseAuthState> {\r\n    return castPromise<firebase.User>(this._fbAuth.signInWithCredential(credential))\r\n      .then((user: firebase.User) => authDataToAuthState(user));\r\n  }\r\n\r\n  getRedirectResult(): Observable<firebase.auth.UserCredential> {\r\n    return fromPromise(castPromise<firebase.auth.UserCredential>(this._fbAuth.getRedirectResult()));\r\n  }\r\n\r\n  private _enumToAuthProvider(providerId: AuthProviders): any {\r\n    switch (providerId) {\r\n      case AuthProviders.Github:\r\n        return new GithubAuthProvider();\r\n      case AuthProviders.Twitter:\r\n        return new TwitterAuthProvider();\r\n      case AuthProviders.Facebook:\r\n        return new FacebookAuthProvider();\r\n      case AuthProviders.Google:\r\n        return new GoogleAuthProvider();\r\n      default:\r\n        throw new Error(`Unsupported firebase auth provider ${providerId}`);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: undefined, decorators: [{ type: Inject, args: [FirebaseApp, ] }, ]},\n];\n}\r\n\r\n// Cast Firebase promises as Zone-patched Promises\r\nfunction castPromise<T>(promiseLike: PromiseLike<T>): Promise<T> {\r\n  return Promise.resolve(promiseLike) as Promise<T>;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}